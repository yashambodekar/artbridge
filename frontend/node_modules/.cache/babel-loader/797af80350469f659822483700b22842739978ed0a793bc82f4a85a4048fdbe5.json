{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(connection, command, serverConnectionId) {\n    /** @internal */\n    this.name = constants_1.COMMAND_STARTED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    // TODO: remove in major revision, this is not spec behavior\n    if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = command.databaseName;\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n    this.serverConnectionId = serverConnectionId;\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(connection, command, reply, started, serverConnectionId) {\n    /** @internal */\n    this.name = constants_1.COMMAND_SUCCEEDED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(reply));\n    this.serverConnectionId = serverConnectionId;\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(connection, command, error, started, serverConnectionId) {\n    /** @internal */\n    this.name = constants_1.COMMAND_FAILED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.failure = maybeRedact(commandName, cmd, error);\n    this.serverConnectionId = serverConnectionId;\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set(['authenticate', 'saslStart', 'saslContinue', 'getnonce', 'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb']);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = commandDoc => Object.keys(commandDoc)[0];\nconst collectionName = command => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n};\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n  if (command instanceof commands_1.OpMsgRequest) {\n    const cmd = {\n      ...command.command\n    };\n    // For OP_MSG with payload type 1 we need to pull the documents\n    // array out of the document sequence for monitoring.\n    if (cmd.ops instanceof commands_1.DocumentSequence) {\n      cmd.ops = cmd.ops.documents;\n    }\n    if (cmd.nsInfo instanceof commands_1.DocumentSequence) {\n      cmd.nsInfo = cmd.nsInfo.documents;\n    }\n    return cmd;\n  }\n  if (command.query?.$query) {\n    let result;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = {\n        find: collectionName(command)\n      };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = {\n            ...command.query[key]\n          };\n        }\n      });\n    }\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = command[legacyKey];\n      }\n    });\n    return result;\n  }\n  let clonedQuery = {};\n  const clonedCommand = {\n    ...command\n  };\n  if (command.query) {\n    clonedQuery = {\n      ...command.query\n    };\n    clonedCommand.query = clonedQuery;\n  }\n  return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(reply) {\n  if (!reply) {\n    return reply;\n  }\n  return reply.result ? reply.result : reply;\n}\nfunction extractConnectionDetails(connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}","map":{"version":3,"names":["constants_1","require","utils_1","commands_1","CommandStartedEvent","constructor","connection","command","serverConnectionId","name","COMMAND_STARTED","cmd","extractCommand","commandName","extractCommandName","address","connectionId","serviceId","extractConnectionDetails","exports","SENSITIVE_COMMANDS","has","commandObj","requestId","databaseName","maybeRedact","hasServiceId","CommandSucceededEvent","reply","started","COMMAND_SUCCEEDED","duration","calculateDurationInMs","extractReply","CommandFailedEvent","error","COMMAND_FAILED","failure","Set","HELLO_COMMANDS","LEGACY_HELLO_COMMAND","LEGACY_HELLO_COMMAND_CAMEL_CASE","commandDoc","Object","keys","collectionName","ns","split","result","speculativeAuthenticate","LEGACY_FIND_QUERY_MAP","$query","$orderby","$hint","$comment","$maxScan","$max","$min","$returnKey","$showDiskLoc","$maxTimeMS","$snapshot","LEGACY_FIND_OPTIONS_MAP","numberToSkip","numberToReturn","returnFieldSelector","OpMsgRequest","ops","DocumentSequence","documents","nsInfo","query","assign","find","forEach","key","legacyKey","clonedQuery","clonedCommand","id"],"sources":["C:\\Users\\HP\\node_modules\\mongodb\\src\\cmap\\command_monitoring_events.ts"],"sourcesContent":["import { type Document, type ObjectId } from '../bson';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  LEGACY_HELLO_COMMAND,\n  LEGACY_HELLO_COMMAND_CAMEL_CASE\n} from '../constants';\nimport { calculateDurationInMs } from '../utils';\nimport {\n  DocumentSequence,\n  OpMsgRequest,\n  type OpQueryRequest,\n  type WriteProtocolMessageType\n} from './commands';\nimport type { Connection } from './connection';\n\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nexport class CommandStartedEvent {\n  commandObj?: Document;\n  requestId: number;\n  databaseName: string;\n  commandName: string;\n  command: Document;\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\"\n   * from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_STARTED;\n\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    // TODO: remove in major revision, this is not spec behavior\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = command.databaseName;\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nexport class CommandSucceededEvent {\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: unknown;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_SUCCEEDED;\n\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    reply: Document | undefined,\n    started: number,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(reply));\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nexport class CommandFailedEvent {\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_FAILED;\n\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    error: Error | Document,\n    started: number,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.failure = maybeRedact(commandName, cmd, error) as Error;\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexport const SENSITIVE_COMMANDS = new Set([\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n]);\n\nconst HELLO_COMMANDS = new Set(['hello', LEGACY_HELLO_COMMAND, LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n\n// helper methods\nconst extractCommandName = (commandDoc: Document) => Object.keys(commandDoc)[0];\nconst collectionName = (command: OpQueryRequest) => command.ns.split('.')[1];\nconst maybeRedact = (commandName: string, commandDoc: Document, result: Error | Document) =>\n  SENSITIVE_COMMANDS.has(commandName) ||\n  (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\n\nconst LEGACY_FIND_QUERY_MAP: { [key: string]: string } = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\n\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n} as const;\n\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command: WriteProtocolMessageType): Document {\n  if (command instanceof OpMsgRequest) {\n    const cmd = { ...command.command };\n    // For OP_MSG with payload type 1 we need to pull the documents\n    // array out of the document sequence for monitoring.\n    if (cmd.ops instanceof DocumentSequence) {\n      cmd.ops = cmd.ops.documents;\n    }\n    if (cmd.nsInfo instanceof DocumentSequence) {\n      cmd.nsInfo = cmd.nsInfo.documents;\n    }\n    return cmd;\n  }\n\n  if (command.query?.$query) {\n    let result: Document;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = { find: collectionName(command) };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = { ...command.query[key] };\n        }\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key as keyof typeof LEGACY_FIND_OPTIONS_MAP;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = command[legacyKey];\n      }\n    });\n\n    return result;\n  }\n\n  let clonedQuery: Record<string, unknown> = {};\n  const clonedCommand: Record<string, unknown> = { ...command };\n  if (command.query) {\n    clonedQuery = { ...command.query };\n    clonedCommand.query = clonedQuery;\n  }\n\n  return command.query ? clonedQuery : clonedCommand;\n}\n\nfunction extractReply(reply?: Document) {\n  if (!reply) {\n    return reply;\n  }\n\n  return reply.result ? reply.result : reply;\n}\n\nfunction extractConnectionDetails(connection: Connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}