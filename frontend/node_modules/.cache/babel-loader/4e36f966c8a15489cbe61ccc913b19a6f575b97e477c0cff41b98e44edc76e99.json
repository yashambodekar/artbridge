{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toUTF8 = exports.getBigInt64LE = exports.getFloat64LE = exports.getInt32LE = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSONError = exports.BSON = exports.Binary = void 0;\nexports.parseToElementsToArray = parseToElementsToArray;\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\nexports.resolveBSONOptions = resolveBSONOptions;\nexports.parseUtf8ValidationOption = parseUtf8ValidationOption;\n/* eslint-disable no-restricted-imports */\nconst bson_1 = require(\"bson\");\nvar bson_2 = require(\"bson\");\nObject.defineProperty(exports, \"Binary\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Binary;\n  }\n});\nObject.defineProperty(exports, \"BSON\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.BSON;\n  }\n});\nObject.defineProperty(exports, \"BSONError\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.BSONError;\n  }\n});\nObject.defineProperty(exports, \"BSONRegExp\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.BSONRegExp;\n  }\n});\nObject.defineProperty(exports, \"BSONSymbol\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.BSONSymbol;\n  }\n});\nObject.defineProperty(exports, \"BSONType\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.BSONType;\n  }\n});\nObject.defineProperty(exports, \"calculateObjectSize\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.calculateObjectSize;\n  }\n});\nObject.defineProperty(exports, \"Code\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Code;\n  }\n});\nObject.defineProperty(exports, \"DBRef\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.DBRef;\n  }\n});\nObject.defineProperty(exports, \"Decimal128\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Decimal128;\n  }\n});\nObject.defineProperty(exports, \"deserialize\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.deserialize;\n  }\n});\nObject.defineProperty(exports, \"Double\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Double;\n  }\n});\nObject.defineProperty(exports, \"EJSON\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.EJSON;\n  }\n});\nObject.defineProperty(exports, \"Int32\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Int32;\n  }\n});\nObject.defineProperty(exports, \"Long\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Long;\n  }\n});\nObject.defineProperty(exports, \"MaxKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.MaxKey;\n  }\n});\nObject.defineProperty(exports, \"MinKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.MinKey;\n  }\n});\nObject.defineProperty(exports, \"ObjectId\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.ObjectId;\n  }\n});\nObject.defineProperty(exports, \"serialize\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.serialize;\n  }\n});\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.Timestamp;\n  }\n});\nObject.defineProperty(exports, \"UUID\", {\n  enumerable: true,\n  get: function () {\n    return bson_2.UUID;\n  }\n});\nfunction parseToElementsToArray(bytes, offset) {\n  const res = bson_1.BSON.onDemand.parseToElements(bytes, offset);\n  return Array.isArray(res) ? res : [...res];\n}\nexports.getInt32LE = bson_1.BSON.onDemand.NumberUtils.getInt32LE;\nexports.getFloat64LE = bson_1.BSON.onDemand.NumberUtils.getFloat64LE;\nexports.getBigInt64LE = bson_1.BSON.onDemand.NumberUtils.getBigInt64LE;\nexports.toUTF8 = bson_1.BSON.onDemand.ByteUtils.toUTF8;\nfunction pluckBSONSerializeOptions(options) {\n  const {\n    fieldsAsRaw,\n    useBigInt64,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    useBigInt64,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\n/** @internal */\nfunction parseUtf8ValidationOption(options) {\n  const enableUtf8Validation = options?.enableUtf8Validation;\n  if (enableUtf8Validation === false) {\n    return {\n      utf8: false\n    };\n  }\n  return {\n    utf8: {\n      writeErrors: false\n    }\n  };\n}","map":{"version":3,"names":["exports","parseToElementsToArray","pluckBSONSerializeOptions","resolveBSONOptions","parseUtf8ValidationOption","bson_1","require","bson_2","Object","defineProperty","enumerable","get","Binary","BSON","BSONError","BSONRegExp","BSONSymbol","BSONType","calculateObjectSize","Code","DBRef","Decimal128","deserialize","Double","EJSON","Int32","Long","MaxKey","MinKey","ObjectId","serialize","Timestamp","UUID","bytes","offset","res","onDemand","parseToElements","Array","isArray","getInt32LE","NumberUtils","getFloat64LE","getBigInt64LE","toUTF8","ByteUtils","options","fieldsAsRaw","useBigInt64","promoteValues","promoteBuffers","promoteLongs","serializeFunctions","ignoreUndefined","bsonRegExp","raw","enableUtf8Validation","parent","parentOptions","bsonOptions","utf8","writeErrors"],"sources":["C:\\Users\\HP\\node_modules\\mongodb\\src\\bson.ts"],"sourcesContent":["/* eslint-disable no-restricted-imports */\nimport { BSON, type DeserializeOptions, type SerializeOptions } from 'bson';\n\nexport {\n  Binary,\n  BSON,\n  BSONError,\n  BSONRegExp,\n  BSONSymbol,\n  BSONType,\n  calculateObjectSize,\n  Code,\n  DBRef,\n  Decimal128,\n  deserialize,\n  type DeserializeOptions,\n  Document,\n  Double,\n  EJSON,\n  EJSONOptions,\n  Int32,\n  Long,\n  MaxKey,\n  MinKey,\n  ObjectId,\n  type ObjectIdLike,\n  serialize,\n  Timestamp,\n  UUID\n} from 'bson';\n\n/** @internal */\nexport type BSONElement = BSON.OnDemand['BSONElement'];\n\nexport function parseToElementsToArray(bytes: Uint8Array, offset?: number): BSONElement[] {\n  const res = BSON.onDemand.parseToElements(bytes, offset);\n  return Array.isArray(res) ? res : [...res];\n}\n\nexport const getInt32LE = BSON.onDemand.NumberUtils.getInt32LE;\nexport const getFloat64LE = BSON.onDemand.NumberUtils.getFloat64LE;\nexport const getBigInt64LE = BSON.onDemand.NumberUtils.getBigInt64LE;\nexport const toUTF8 = BSON.onDemand.ByteUtils.toUTF8;\n\n/**\n * BSON Serialization options.\n * @public\n */\nexport interface BSONSerializeOptions\n  extends Omit<SerializeOptions, 'index'>,\n    Omit<\n      DeserializeOptions,\n      | 'evalFunctions'\n      | 'cacheFunctions'\n      | 'cacheFunctionsCrc32'\n      | 'allowObjectSmallerThanBufferSize'\n      | 'index'\n      | 'validation'\n    > {\n  /**\n   * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)\n   * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).\n   * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)\n   * for more detail about what \"unsafe\" refers to in this context.\n   * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate\n   * your own buffer and clone the contents:\n   *\n   * @example\n   * ```ts\n   * const raw = await collection.findOne({}, { raw: true });\n   * const myBuffer = Buffer.alloc(raw.byteLength);\n   * myBuffer.set(raw, 0);\n   * // Only save and use `myBuffer` beyond this point\n   * ```\n   *\n   * @remarks\n   * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).\n   * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.\n   */\n  raw?: boolean;\n\n  /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\n  enableUtf8Validation?: boolean;\n}\n\nexport function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions {\n  const {\n    fieldsAsRaw,\n    useBigInt64,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    useBigInt64,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nexport function resolveBSONOptions(\n  options?: BSONSerializeOptions,\n  parent?: { bsonOptions?: BSONSerializeOptions }\n): BSONSerializeOptions {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation:\n      options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\n\n/** @internal */\nexport function parseUtf8ValidationOption(options?: { enableUtf8Validation?: boolean }): {\n  utf8: { writeErrors: false } | false;\n} {\n  const enableUtf8Validation = options?.enableUtf8Validation;\n  if (enableUtf8Validation === false) {\n    return { utf8: false };\n  }\n  return { utf8: { writeErrors: false } };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}