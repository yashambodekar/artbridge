{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nexports._advanceClusterTime = _advanceClusterTime;\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n});\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}","map":{"version":3,"names":["exports","_advanceClusterTime","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","TopologyType","Object","freeze","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","LoadBalanced","ServerType","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","LoadBalancer","entity","$clusterTime","clusterTime","greaterThan"],"sources":["C:\\Users\\HP\\node_modules\\mongodb\\src\\sdam\\common.ts"],"sourcesContent":["import type { Binary, Long, Timestamp } from '../bson';\nimport type { ClientSession } from '../sessions';\nimport type { Topology } from './topology';\n\n// shared state names\nexport const STATE_CLOSING = 'closing';\nexport const STATE_CLOSED = 'closed';\nexport const STATE_CONNECTING = 'connecting';\nexport const STATE_CONNECTED = 'connected';\n\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexport const TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n} as const);\n\n/** @public */\nexport type TopologyType = (typeof TopologyType)[keyof typeof TopologyType];\n\n/**\n * An enumeration of server types we know about\n * @public\n */\nexport const ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n} as const);\n\n/** @public */\nexport type ServerType = (typeof ServerType)[keyof typeof ServerType];\n\n/**\n * @public\n * Gossiped in component for the cluster time tracking the state of user databases\n * across the cluster. It may optionally include a signature identifying the process that\n * generated such a value.\n */\nexport interface ClusterTime {\n  clusterTime: Timestamp;\n  /** Used to validate the identity of a request or response's ClusterTime. */\n  signature?: {\n    hash: Binary;\n    keyId: Long;\n  };\n}\n\n/** Shared function to determine clusterTime for a given topology or session */\nexport function _advanceClusterTime(\n  entity: Topology | ClientSession,\n  $clusterTime: ClusterTime\n): void {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\n"],"mappings":";;;;;;AA8DAA,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AA1DA;AACaD,OAAA,CAAAE,aAAa,GAAG,SAAS;AACzBF,OAAA,CAAAG,YAAY,GAAG,QAAQ;AACvBH,OAAA,CAAAI,gBAAgB,GAAG,YAAY;AAC/BJ,OAAA,CAAAK,eAAe,GAAG,WAAW;AAE1C;;;;AAIaL,OAAA,CAAAM,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC;EACxCC,MAAM,EAAE,QAAQ;EAChBC,mBAAmB,EAAE,qBAAqB;EAC1CC,qBAAqB,EAAE,uBAAuB;EAC9CC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBC,YAAY,EAAE;CACN,CAAC;AAKX;;;;AAIad,OAAA,CAAAe,UAAU,GAAGR,MAAM,CAACC,MAAM,CAAC;EACtCQ,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,iBAAiB;EAClCC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBV,OAAO,EAAE,SAAS;EAClBW,YAAY,EAAE;CACN,CAAC;AAoBX;AACA,SAAgBvB,mBAAmBA,CACjCwB,MAAgC,EAChCC,YAAyB;EAEzB,IAAID,MAAM,CAACE,WAAW,IAAI,IAAI,EAAE;IAC9BF,MAAM,CAACE,WAAW,GAAGD,YAAY;EACnC,CAAC,MAAM;IACL,IAAIA,YAAY,CAACC,WAAW,CAACC,WAAW,CAACH,MAAM,CAACE,WAAW,CAACA,WAAW,CAAC,EAAE;MACxEF,MAAM,CAACE,WAAW,GAAGD,YAAY;IACnC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}