{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    super();\n    this.on('error', utils_1.noop);\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n  stop() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n  // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n  schedule() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n    }\n    this._timeout = (0, timers_1.setTimeout)(() => {\n      this._poll().then(undefined, utils_1.squashError);\n    }, this.intervalMS);\n  }\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n  failure() {\n    this.haMode = true;\n    this.schedule();\n  }\n  async _poll() {\n    const generation = this.generation;\n    let srvRecords;\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch {\n      this.failure();\n      return;\n    }\n    if (generation !== this.generation) {\n      return;\n    }\n    const finalAddresses = [];\n    for (const record of srvRecords) {\n      try {\n        (0, utils_1.checkParentDomainMatch)(record.name, this.srvHost);\n        finalAddresses.push(record);\n      } catch (error) {\n        (0, utils_1.squashError)(error);\n      }\n    }\n    if (!finalAddresses.length) {\n      this.failure();\n      return;\n    }\n    this.success(finalAddresses);\n  }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';","map":{"version":3,"names":["dns","require","timers_1","error_1","mongo_types_1","utils_1","SrvPollingEvent","constructor","srvRecords","hostnames","Set","map","r","HostAddress","fromSrvRecord","toString","exports","SrvPoller","TypedEventEmitter","options","on","noop","srvHost","MongoRuntimeError","srvMaxHosts","srvServiceName","rescanSrvIntervalMS","heartbeatFrequencyMS","haMode","generation","_timeout","undefined","srvAddress","intervalMS","start","schedule","stop","clearTimeout","setTimeout","_poll","then","squashError","success","emit","SRV_RECORD_DISCOVERY","failure","promises","resolveSrv","finalAddresses","record","checkParentDomainMatch","name","push","error","length"],"sources":["C:\\Users\\HP\\node_modules\\mongodb\\src\\sdam\\srv_polling.ts"],"sourcesContent":["import * as dns from 'dns';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport { MongoRuntimeError } from '../error';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { checkParentDomainMatch, HostAddress, noop, squashError } from '../utils';\n\n/**\n * @internal\n * @category Event\n */\nexport class SrvPollingEvent {\n  srvRecords: dns.SrvRecord[];\n  constructor(srvRecords: dns.SrvRecord[]) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames(): Set<string> {\n    return new Set(this.srvRecords.map(r => HostAddress.fromSrvRecord(r).toString()));\n  }\n}\n\n/** @internal */\nexport interface SrvPollerOptions {\n  srvServiceName: string;\n  srvMaxHosts: number;\n  srvHost: string;\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport type SrvPollerEvents = {\n  srvRecordDiscovery(event: SrvPollingEvent): void;\n};\n\n/** @internal */\nexport class SrvPoller extends TypedEventEmitter<SrvPollerEvents> {\n  srvHost: string;\n  rescanSrvIntervalMS: number;\n  heartbeatFrequencyMS: number;\n  haMode: boolean;\n  generation: number;\n  srvMaxHosts: number;\n  srvServiceName: string;\n  _timeout?: NodeJS.Timeout;\n\n  /** @event */\n  static readonly SRV_RECORD_DISCOVERY = 'srvRecordDiscovery' as const;\n\n  constructor(options: SrvPollerOptions) {\n    super();\n    this.on('error', noop);\n\n    if (!options || !options.srvHost) {\n      throw new MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = undefined;\n  }\n\n  get srvAddress(): string {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS(): number {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start(): void {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n  schedule(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(() => {\n      this._poll().then(undefined, squashError);\n    }, this.intervalMS);\n  }\n\n  success(srvRecords: dns.SrvRecord[]): void {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(): void {\n    this.haMode = true;\n    this.schedule();\n  }\n\n  async _poll(): Promise<void> {\n    const generation = this.generation;\n    let srvRecords;\n\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch {\n      this.failure();\n      return;\n    }\n\n    if (generation !== this.generation) {\n      return;\n    }\n\n    const finalAddresses: dns.SrvRecord[] = [];\n    for (const record of srvRecords) {\n      try {\n        checkParentDomainMatch(record.name, this.srvHost);\n        finalAddresses.push(record);\n      } catch (error) {\n        squashError(error);\n      }\n    }\n\n    if (!finalAddresses.length) {\n      this.failure();\n      return;\n    }\n\n    this.success(finalAddresses);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}