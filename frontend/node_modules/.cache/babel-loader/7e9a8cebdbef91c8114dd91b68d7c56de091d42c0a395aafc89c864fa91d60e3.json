{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplainableCursor = exports.Explain = exports.ExplainVerbosity = void 0;\nexports.validateExplainTimeoutOptions = validateExplainTimeoutOptions;\nexports.decorateWithExplain = decorateWithExplain;\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n  constructor(verbosity, maxTimeMS) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n    this.maxTimeMS = maxTimeMS;\n  }\n  static fromOptions({\n    explain\n  } = {}) {\n    if (explain == null) return;\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n    const {\n      verbosity,\n      maxTimeMS\n    } = explain;\n    return new Explain(verbosity, maxTimeMS);\n  }\n}\nexports.Explain = Explain;\nfunction validateExplainTimeoutOptions(options, explain) {\n  const {\n    maxTimeMS,\n    timeoutMS\n  } = options;\n  if (timeoutMS != null && (maxTimeMS != null || explain?.maxTimeMS != null)) {\n    throw new error_1.MongoAPIError('Cannot use maxTimeMS with timeoutMS for explain commands.');\n  }\n}\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n  const {\n    verbosity,\n    maxTimeMS\n  } = explain;\n  const baseCommand = {\n    explain: command,\n    verbosity\n  };\n  if (typeof maxTimeMS === 'number') {\n    baseCommand.maxTimeMS = maxTimeMS;\n  }\n  return baseCommand;\n}\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nclass ExplainableCursor extends abstract_cursor_1.AbstractCursor {\n  resolveExplainTimeoutOptions(verbosity, options) {\n    let explain;\n    let timeout;\n    if (verbosity == null && options == null) {\n      explain = undefined;\n      timeout = undefined;\n    } else if (verbosity != null && options == null) {\n      explain = typeof verbosity !== 'object' ? verbosity : 'verbosity' in verbosity ? verbosity : undefined;\n      timeout = typeof verbosity === 'object' && 'timeoutMS' in verbosity ? verbosity : undefined;\n    } else {\n      // @ts-expect-error TS isn't smart enough to determine that if both options are provided, the first is explain options\n      explain = verbosity;\n      timeout = options;\n    }\n    return {\n      timeout,\n      explain\n    };\n  }\n}\nexports.ExplainableCursor = ExplainableCursor;","map":{"version":3,"names":["exports","validateExplainTimeoutOptions","decorateWithExplain","abstract_cursor_1","require","error_1","ExplainVerbosity","Object","freeze","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","Explain","constructor","verbosity","maxTimeMS","fromOptions","explain","options","timeoutMS","MongoAPIError","command","baseCommand","ExplainableCursor","AbstractCursor","resolveExplainTimeoutOptions","timeout","undefined"],"sources":["C:\\Users\\HP\\node_modules\\mongodb\\src\\explain.ts"],"sourcesContent":["import { type Document } from './bson';\nimport { AbstractCursor } from './cursor/abstract_cursor';\nimport { MongoAPIError } from './error';\n\n/** @public */\nexport const ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n} as const);\n\n/** @public */\nexport type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\".\n * @public\n */\nexport type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** @public */\nexport interface ExplainCommandOptions {\n  /** The explain verbosity for the command. */\n  verbosity: ExplainVerbosity;\n  /** The maxTimeMS setting for the command. */\n  maxTimeMS?: number;\n}\n\n/**\n * @public\n *\n * When set, this configures an explain command.  Valid values are boolean (for legacy compatibility,\n * see {@link ExplainVerbosityLike}), a string containing the explain verbosity, or an object containing the verbosity and\n * an optional maxTimeMS.\n *\n * Examples of valid usage:\n *\n * ```typescript\n * collection.find({ name: 'john doe' }, { explain: true });\n * collection.find({ name: 'john doe' }, { explain: false });\n * collection.find({ name: 'john doe' }, { explain: 'queryPlanner' });\n * collection.find({ name: 'john doe' }, { explain: { verbosity: 'queryPlanner' } });\n * ```\n *\n * maxTimeMS can be configured to limit the amount of time the server\n * spends executing an explain by providing an object:\n *\n * ```typescript\n * // limits the `explain` command to no more than 2 seconds\n * collection.find({ name: 'john doe' }, {\n *   explain:  {\n *    verbosity: 'queryPlanner',\n *    maxTimeMS: 2000\n *  }\n * });\n * ```\n */\nexport interface ExplainOptions {\n  /** Specifies the verbosity mode for the explain output. */\n  explain?: ExplainVerbosityLike | ExplainCommandOptions;\n}\n\n/** @internal */\nexport class Explain {\n  readonly verbosity: ExplainVerbosity;\n  readonly maxTimeMS?: number;\n\n  private constructor(verbosity: ExplainVerbosityLike, maxTimeMS?: number) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity\n        ? ExplainVerbosity.allPlansExecution\n        : ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n\n    this.maxTimeMS = maxTimeMS;\n  }\n\n  static fromOptions({ explain }: ExplainOptions = {}): Explain | undefined {\n    if (explain == null) return;\n\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    const { verbosity, maxTimeMS } = explain;\n    return new Explain(verbosity, maxTimeMS);\n  }\n}\n\nexport function validateExplainTimeoutOptions(options: Document, explain?: Explain) {\n  const { maxTimeMS, timeoutMS } = options;\n  if (timeoutMS != null && (maxTimeMS != null || explain?.maxTimeMS != null)) {\n    throw new MongoAPIError('Cannot use maxTimeMS with timeoutMS for explain commands.');\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(\n  command: Document,\n  explain: Explain\n): {\n  explain: Document;\n  verbosity: ExplainVerbosity;\n  maxTimeMS?: number;\n} {\n  type ExplainCommand = ReturnType<typeof decorateWithExplain>;\n  const { verbosity, maxTimeMS } = explain;\n  const baseCommand: ExplainCommand = { explain: command, verbosity };\n\n  if (typeof maxTimeMS === 'number') {\n    baseCommand.maxTimeMS = maxTimeMS;\n  }\n\n  return baseCommand;\n}\n\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nexport abstract class ExplainableCursor<TSchema> extends AbstractCursor<TSchema> {\n  /** Execute the explain for the cursor */\n  abstract explain(): Promise<Document>;\n  abstract explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document>;\n  abstract explain(options: { timeoutMS?: number }): Promise<Document>;\n  abstract explain(\n    verbosity: ExplainVerbosityLike | ExplainCommandOptions,\n    options: { timeoutMS?: number }\n  ): Promise<Document>;\n  abstract explain(\n    verbosity?: ExplainVerbosityLike | ExplainCommandOptions | { timeoutMS?: number },\n    options?: { timeoutMS?: number }\n  ): Promise<Document>;\n\n  protected resolveExplainTimeoutOptions(\n    verbosity?: ExplainVerbosityLike | ExplainCommandOptions | { timeoutMS?: number },\n    options?: { timeoutMS?: number }\n  ): { timeout?: { timeoutMS?: number }; explain?: ExplainVerbosityLike | ExplainCommandOptions } {\n    let explain: ExplainVerbosityLike | ExplainCommandOptions | undefined;\n    let timeout: { timeoutMS?: number } | undefined;\n\n    if (verbosity == null && options == null) {\n      explain = undefined;\n      timeout = undefined;\n    } else if (verbosity != null && options == null) {\n      explain =\n        typeof verbosity !== 'object'\n          ? verbosity\n          : 'verbosity' in verbosity\n            ? verbosity\n            : undefined;\n\n      timeout = typeof verbosity === 'object' && 'timeoutMS' in verbosity ? verbosity : undefined;\n    } else {\n      // @ts-expect-error TS isn't smart enough to determine that if both options are provided, the first is explain options\n      explain = verbosity;\n      timeout = options;\n    }\n\n    return { timeout, explain };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}